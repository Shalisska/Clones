@using Clones.Helpers;
@using Clones.Models;

@model IGridViewModel

@{
    var columns = Model.Columns.Where(c => c.PropertyName != Model.PrimaryKeyName).Select(c => c).ToList();
    var modelItem = Model.CreateNewInstance();
}

@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()
    @Html.ValidationSummary(true, "", new { @class = "text-danger" })
    <table class="table">
        <tr>
            @foreach (var item in columns)
            {
                <th>
                    @(Html.For(modelItem).DisplayName(item.PropertyName))
                </th>
            }
        </tr>
        <tr>
            @foreach (var item in columns)
            {
            <td>
                @{
                    switch (item.ColumnType)
                    {
                        case ControlType.Hidden:
                            @(Html.For(modelItem).Display(item.PropertyName))
                            @(Html.For(modelItem).Hidden(item.PropertyName))
                            break;
                        case ControlType.Select:
                            @(Html.For(modelItem).DropDownList(item.PropertyName, item.SelectList, new Dictionary<string, object> { { "class", "form-control" } }))
                            break;
                        default:
                            @(Html.For(modelItem).Editor(item.PropertyName, new { htmlAttributes = new { @class = "form-control" } }))
                            break;
                    }
                    if (item.ColumnType != ControlType.Hidden)
                    {
                        @(Html.For(modelItem).ValidationMessage(item.PropertyName))
                    }
                }
            </td>
            }
        </tr>
    </table>
    <button class="btn btn-primary j-create-model">Create</button>
    <button type="reset" class="btn btn-default">Cancel</button>
}
